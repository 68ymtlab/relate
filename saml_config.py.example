from os import path
import saml2
BASEDIR = path.dirname(path.abspath(__file__))

_BASE_URL = 'https://relate.cs.illinois.edu'

SAML_CONFIG = {
    # full path to the xmlsec1 binary programm
    'xmlsec_binary': '/usr/bin/xmlsec1',

    # your entity id, usually your subdomain plus the url to the metadata view
    'entityid': _BASE_URL + '/saml2/metadata/',

    # directory with attribute mapping
    'attribute_map_dir': path.join(BASEDIR, 'attribute-maps'),

    # this block states what services we provide
    'service': {
        # we are just a lonely SP
        'sp': {
            'name': 'RELATE SAML2 SP',
            'name_id_format': saml2.saml.NAMEID_FORMAT_PERSISTENT,
            'endpoints': {
                # url and binding to the assertion consumer service view
                # do not change the binding or service name
                'assertion_consumer_service': [
                    (_BASE_URL + '/saml2/acs/',
                     saml2.BINDING_HTTP_POST),
                    ],
                # url and binding to the single logout service view
                # do not change the binding or service name
                'single_logout_service': [
                    (_BASE_URL + '/saml2/ls/',
                     saml2.BINDING_HTTP_REDIRECT),
                    (_BASE_URL + '/saml2/ls/post',
                     saml2.BINDING_HTTP_POST),
                    ],
                },

            # attributes that this project needs to identify a user
            'required_attributes': ['uid'],

            # attributes that may be useful to have but not required
            'optional_attributes': ['eduPersonAffiliation'],

            # in this section the list of IdPs we talk to are defined
            'idp': {
                # we do not need a WAYF service since there is
                # only an IdP defined here. This IdP should be
                # present in our metadata

                # the keys of this dictionary are entity ids
                'https://localhost/simplesaml/saml2/idp/metadata.php': {
                    'single_sign_on_service': {
                        saml2.BINDING_HTTP_REDIRECT:
                            'https://localhost/simplesaml/saml2/idp/SSOService.php',
                        },
                    'single_logout_service': {
                        saml2.BINDING_HTTP_REDIRECT:
                        'https://localhost/simplesaml/saml2/idp/SingleLogoutService.php',  # noqa
                        },
                    },
                },
            },
        },

    # where the remote metadata is stored
    'metadata': {
        'local': [path.join(BASEDIR, 'saml-config', 'remote_metadata.xml')],
        },

    # set to 1 to output debugging information
    'debug': 1,

    # certificate
    # see saml2-keygen.sh in this directory
    'key_file': path.join(BASEDIR, 'saml-config', 'sp-key.pem'),  # private part
    'cert_file': path.join(BASEDIR, 'saml-config', 'sp-cert.pem'),  # public part

    # own metadata settings
    'contact_person': [
        {'given_name': 'Andreas',
         'sur_name': 'Kloeckner',
         'company': 'CS - University of Illinois',
         'email_address': 'andreask@illinois.edu',
         'contact_type': 'technical'},
        {'given_name': 'Andreas',
         'sur_name': 'Kloeckner',
         'company': 'CS - University of Illinois',
         'email_address': 'andreask@illinois.edu',
         'contact_type': 'administrative'},
        ],
    # you can set multilanguage information here
    'organization': {
        'name': [('RELATE', 'en')],
        'display_name': [('RELATE', 'en')],
        'url': [(_BASE_URL, 'en')],
        },
    'valid_for': 24,  # how long is our metadata valid
    }

# vim: filetype=python
